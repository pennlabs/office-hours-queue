# Generated by Django 5.0.3 on 2025-04-13 15:24

from django.db import migrations

def migrate_schedule_data(apps, schema_editor):
    OldCalendarRelation = apps.get_model('schedule', 'CalendarRelation')
    OldCalendar = apps.get_model('schedule', 'Calendar')
    OldEvent = apps.get_model('schedule', 'Event')
    OldOccurrence = apps.get_model('schedule', 'Occurrence') 
    OldRule = apps.get_model('schedule', 'Rule')
    OldEventRelation = apps.get_model('schedule', 'EventRelation')

    NewCalendarRelation = apps.get_model('ohq_schedule', 'CalendarRelation')
    NewCalendar = apps.get_model('ohq_schedule', 'Calendar')
    NewEvent = apps.get_model('ohq_schedule', 'Event')
    NewOccurrence = apps.get_model('ohq_schedule', 'Occurrence')
    NewRule = apps.get_model('ohq_schedule', 'Rule')
    NewEventRelation = apps.get_model('ohq_schedule', 'EventRelation')

    for old_calendar_relation in OldCalendarRelation.objects.all():
        NewCalendarRelation.objects.create(
            id=old_calendar_relation.id,
            calendar_id=old_calendar_relation.calendar_id,
            content_type_id=old_calendar_relation.content_type_id,
            object_id=old_calendar_relation.object_id, 
            distinction=old_calendar_relation.distinction,
            inheritable=old_calendar_relation.inheritable
        )

    for old_calendar in OldCalendar.objects.all():
        NewCalendar.objects.create(
            id=old_calendar.id,
            name=old_calendar.name,
            slug=old_calendar.slug
        )

    for old_rule in OldRule.objects.all():
        NewRule.objects.create(
            id=old_rule.id,
            name=old_rule.name,
            description=old_rule.description,
            frequency=old_rule.frequency,
            params=old_rule.params
        )

    for old_event in OldEvent.objects.all():
        NewEvent.objects.create(
            id=old_event.id,
            start=old_event.start,
            end=old_event.end,
            title=old_event.title,
            description=old_event.description,
            calendar_id=old_event.calendar_id,
            rule_id=old_event.rule_id,
            end_recurring_period=old_event.end_recurring_period,
            location=old_event.location if hasattr(old_event, 'location') else '',
            bookable=old_event.bookable if hasattr(old_event, 'bookable') else False,
            interval=old_event.interval if hasattr(old_event, 'interval') else None
        )

    for old_occurrence in OldOccurrence.objects.all():
        NewOccurrence.objects.create(
            id=old_occurrence.id,
            event_id=old_occurrence.event_id,
            title=old_occurrence.title,
            description=old_occurrence.description,
            start=old_occurrence.start,
            end=old_occurrence.end,
            cancelled=old_occurrence.cancelled,
            original_start=old_occurrence.original_start,
            original_end=old_occurrence.original_end,
            location=old_occurrence.location if hasattr(old_occurrence, 'location') else '',
            interval=old_occurrence.interval if hasattr(old_occurrence, 'interval') else None
        )

    for old_relation in OldEventRelation.objects.all():
        NewEventRelation.objects.create(
            id=old_relation.id,
            event_id=old_relation.event_id,
            content_type_id=old_relation.content_type_id,
            object_id=old_relation.object_id,
            distinction=old_relation.distinction
        )

def reverse_migrate_schedule_data(apps, schema_editor):
    NewCalendarRelation = apps.get_model('ohq_schedule', 'CalendarRelation')
    NewCalendar = apps.get_model('ohq_schedule', 'Calendar')
    NewEvent = apps.get_model('ohq_schedule', 'Event')
    NewOccurrence = apps.get_model('ohq_schedule', 'Occurrence')
    NewRule = apps.get_model('ohq_schedule', 'Rule')
    NewEventRelation = apps.get_model('ohq_schedule', 'EventRelation')

    NewCalendarRelation.objects.all().delete()
    NewCalendar.objects.all().delete()
    NewEvent.objects.all().delete()
    NewOccurrence.objects.all().delete()
    NewRule.objects.all().delete()
    NewEventRelation.objects.all().delete()

class Migration(migrations.Migration):
    dependencies = [
        ('ohq', '0022_booking'),
        ('schedule', '0001_initial'),
        ('ohq_schedule', '0015_event_bookable_event_interval_event_location_and_more'), 
    ]
    operations = [
        migrations.RunPython(migrate_schedule_data, reverse_migrate_schedule_data),
    ]
